{
  "header": "Autocomplete",
  "headerText": "Autocomplete info coming soon",
  "supplemental": ["MaskTable"],
  "examples": {
    "autocomplete": {
      "header": "Autocomplete",
      "desc": "Provides type-ahead autocomplete functionality."
    },
    "combobox": {
      "header": "Combobox",
      "desc": "A combobox is the single value variant of **tags**"
    },
    "tags": {
      "header": "Tags",
      "desc": "With tags you can allow a user to create new values that may not be present in a provided items list. Keep in mind, tags only supports arrays of **primitive** items and cannot be used with props such as `item-text`, `item-value` for example."
    },
    "scopedSlots": {
      "header": "Scoped slots",
      "desc": "With the power of scoped slots, you can customize the visual output of the select. In this example we add a profile picture for both the chips and list items."
    },
    "customFilter": {
      "header": "Custom filter on autocomplete",
      "desc": "The `filter` prop can be used to filter each individual item with custom logic. In this example we filter items by name"
    },
    "asynchronous": {
      "header": "Asynchronous items",
      "desc": "Sometimes you need to load data externally based upon a search query. Use the `search-input` prop with the **.sync** modifier when using the `autocomplete` prop. We also make use of the new `cache-items` prop. This will keep a unique list of all items that have been passed to the `items` prop and is **REQUIRED** when using asynchronous items and the **multiple** prop."
    }
  },
  "props": {
    "combobox": "The single select version of **tags**"
  },
  "slots": {
    "item": "Scoped slot for designating the markup for a list-tile",
    "no-data": "Mixins.Filterable.slots.noData",
    "selection": "Scoped slot for designating the markup for the selected items"
  },
  "scopedSlots": {
    "item": "Define a custom item appearance",
    "selection": "Define a custom selection appearance"
  },
  "events": {
    "update:error": "Mixins.Validatable.events['update:error']",
    "update:searchInput": "The `search-input.sync` event"
  }
}
